
%class TINYParser
%interface TINYTokens

%{
import java.util.List;
import java.util.ArrayList;
%}

%token <Token> IF THEN END ELSE REPEAT UNTIL ID ATRIB NUM WRITE READ VAR PROCEDURE INT REAL BOOL NEW NIL CLASS SUBT
%token <Token> '+' '-' '*' '/' '<' '='

%next token()
%get  tipo
%semantic Object: node

%left '<' '='
%left '+' '-'
%left '*' '/'

%type <Cmd> cmd
%type <Exp> exp rexp
%type <List> ids procs decl decls exps classes declopt procopt expopt
%type <Proc> proc
%type <Bloco> cmds var
%type <String> tipo supopt
%type <Classe> classe

%%

s : classes ';' procs ';' cmds { out = new Tiny($1, $3, $5); $$ = out; }
  | classes ';' cmds { out = new Tiny($1, new ArrayList<Proc>(), $3); $$ = out; }
  | procs ';' cmds { out = new Tiny(new ArrayList<Classe>(), $1, $3); $$ = out; }
  | cmds { out = new Tiny(new ArrayList<Classe>(), new ArrayList<Proc>(), $1); $$ = out; }
  ;

procs : procs ';' proc { $1.add($3); $$ = $1; }
      | proc { List<Proc> l = new ArrayList<Proc>();
               l.add($1); $$ = l; }
      ;

proc : PROCEDURE ID '(' ')' cmds END { $$ = new Proc($2.getLexeme(),
        new ArrayList<Decl>(), "void", $5, $1.getLin()); }
     | PROCEDURE ID '(' decls ')' cmds END { $$ = new Proc($2.getLexeme(),
        $4, "void", $6, $1.getLin()); }
     | PROCEDURE ID '(' ')' ':' tipo cmds END { $$ = new Proc($2.getLexeme(),
        new ArrayList<Decl>(), $6, $7, $1.getLin()); }
     | PROCEDURE ID '(' decls ')' ':' tipo cmds END { $$ = new Proc(
        $2.getLexeme(), $4, $7, $8, $1.getLin()); }
     ;

classes : classes ';' classe { $1.add($3); $$ = $1; }
      | classe { List<Classe> l = new ArrayList<Classe>();
               l.add($1); $$ = l; }
      ;

classe : CLASS ID supopt declopt procopt END {
           $$ = new Classe($2.getLexeme(), $3, $4, $5, $1.getLin());
         }
       ;

supopt : SUBT ID { $$ = $2.getLexeme(); }
       | { $$ = null; }
       ;

declopt : VAR decls { $$ = $2; }
        | { $$ = new ArrayList<Decl>(); }
        ;

procopt : ';' procs { $$ = $2; }
        | { $$ = new ArrayList<Proc>(); }
        ;

decl : ids ':' tipo  { List<Decl> l = new ArrayList<Decl>(); for(String s: (List<String>)$1) l.add(new Decl(s, $3)); $$ = l; }
     ;

tipo : INT  { $$ = "int"; }
     | REAL { $$ = "real"; }
     | BOOL { $$ = "bool"; }
     | ID   { $$ = $1.getLexeme(); }
     ;

decls : decls ',' decl { $1.addAll($3); $$ = $1; }
      | decl
      ;

var : VAR decls ';' { $$ = new Bloco($2, new ArrayList<Cmd>(), $1.getLin()); }
    |             { $$ = new Bloco(new ArrayList<Decl>(), new ArrayList<Cmd>(), 0); }
    ;

ids : ids ',' ID { $1.add($3.getLexeme()); $$ = $1; }
    | ID         { List<String> l = new ArrayList<String>(); l.add($1.getLexeme()); $$ = l; }
    ;

cmds : cmds ';' cmd { $1.add($3); $$ = $1; }
     | var cmd { $1.add($2); $$ = $1; }
     ;

cmd : IF exp THEN cmds END { $$ = new If($2, $4, new Bloco(new ArrayList<Decl>(), new ArrayList<Cmd>(), $3.getLin()), $1.getLin()); }
    | IF exp THEN cmds ELSE cmds END { $$ = new If($2, $4, $6, $1.getLin()); }
    | REPEAT cmds UNTIL exp { $$ = new Repeat($2, $4, $3.getLin()); }
    | WRITE exp { $$ = new Write($2, $1.getLin()); }
    | READ ID { $$ = new Read($2.getLexeme(), $2.getLin()); }
    | ID ATRIB exp { $$ = new Atrib($1.getLexeme(), $3, $2.getLin()); }
    | ID '(' ')' { $$ = new Chamada($1.getLexeme(),
        new ArrayList<Exp>(), $1.getLin()); }
    | ID '(' exps ')' { $$ = new Chamada($1.getLexeme(), $3, $1.getLin()); }
    | rexp '.' ID '(' expopt ')'
           { $$ = new ChamadaMetodo($1, $3.getLexeme(), $5, $3.getLin()); }
    ;

exp : exp '<' exp { $$ = new Menor($1, $3, $2.getLin()); }
    | exp '=' exp { $$ = new Igual($1, $3, $2.getLin()); }
    | exp '+' exp { $$ = new Soma($1, $3, $2.getLin()); }
    | exp '-' exp { $$ = new Sub($1, $3, $2.getLin()); }
    | exp '/' exp { $$ = new Div($1, $3, $2.getLin()); }
    | exp '*' exp { $$ = new Mult($1, $3, $2.getLin()); }
    | '(' exp ')' { $$ = $2; }
    | NUM { $$ = new Num($1.getLexeme(), $1.getLin()); }
    | ID { $$ = new Var($1.getLexeme(), $1.getLin()); }
    | ID '(' ')' { $$ = new Chamada($1.getLexeme(),
        new ArrayList<Exp>(), $1.getLin()); }
    | ID '(' exps ')' { $$ = new Chamada($1.getLexeme(), $3, $1.getLin()); }
    | rexp '.' ID '(' expopt ')'
           { $$ = new ChamadaMetodo($1, $3.getLexeme(), $5, $3.getLin()); }
    | NEW ID '(' expopt ')' { $$ = new Cons($2.getLexeme(), $4, $1.getLin()); }
    | NIL { $$ = Nil.INSTANCE; }
    ;

rexp : ID { $$ = new Var($1.getLexeme(), $1.getLin()); }
     | rexp '.' ID '(' expopt ')'
           { $$ = new ChamadaMetodo($1, $3.getLexeme(), $5, $3.getLin()); }
     | '(' exp ')' { $$ = $2; }
     ;

exps : exps ',' exp { $1.add($3); $$ = $1; }
     | exp { List<Exp> l = new ArrayList<Exp>();
               l.add($1); $$ = l; }
     ;

expopt : exps { $$ = $1; }
       | { $$ = new ArrayList<Exp>(); }
       ;

%%

TINYScanner scan;
int tipo;
Object node;

public Tiny out;

public TINYParser(TINYScanner scan) {
	this.scan = scan;
	token();
}

int token() {
	try {
		Token tok = scan.token();
		tipo = tok.getTipo();
		node = tok;
		return tipo;
	} catch(java.io.IOException ioex) {
		throw new RuntimeException(ioex);
	}
}

void yyerror(String err) {
	throw new RuntimeException(err + ": " + node.toString());
}

